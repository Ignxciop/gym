generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  isAdmin    Boolean  @default(false)
  avatarUrl  String?
  gender     String?
  status     String?
  userData   UserData[]
  progresses Progress[]           // Relación inversa con Progress
  routines   Routine[]            // Relación inversa con Routine
  exerciseLogs ExerciseLog[]      // Relación inversa con ExerciseLog
}

model UserData {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  weight    Float
  height    Float
  age       Int
  notes     String?
  date      DateTime @default(now())
}

model Machine {
  id         Int      @id @default(autoincrement())
  name       String
  type       String
  mainMuscle String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  progresses Progress[]           // Relación inversa con Progress
  routineExercises RoutineExercise[] // Relación inversa con RoutineExercise
}

model Progress {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  machine      Machine  @relation(fields: [machineId], references: [id])
  machineId    Int
  weight       Float
  repetitions  Int
  sets         Int
  restTime     Int?
  notes        String?
  performedAt  DateTime @default(now())
}

model Routine {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  user        User              @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime          @default(now())
  exercises   RoutineExercise[]
  exerciseLogs ExerciseLog[]    // Relación inversa con ExerciseLog
}

model RoutineExercise {
  id         Int      @id @default(autoincrement())
  routine    Routine  @relation(fields: [routineId], references: [id])
  routineId  Int
  machine    Machine  @relation(fields: [machineId], references: [id])
  machineId  Int
  sets       Int
  restTime   Int
  order      Int
  notes      String?
  exerciseLogs ExerciseLog[]    // Relación inversa con ExerciseLog
}

model ExerciseLog {
  id                 Int              @id @default(autoincrement())
  user               User             @relation(fields: [userId], references: [id])
  userId             Int
  routine            Routine          @relation(fields: [routineId], references: [id])
  routineId          Int
  routineExercise    RoutineExercise  @relation(fields: [routineExerciseId], references: [id])
  routineExerciseId  Int
  completedAt        DateTime         @default(now())
  weight             Float
  repetitions        Int
  sets               Int
  notes              String?
}